CI/CD com Travis

https://www.travis-ci.com/

Criar conta e vincular com repositório do GitHub

------------------------------------------------

Criar na raiz do projeto o arquivo .travis.yml

cache:
  directories:
    - $HOME/.m2

language: java

services:
  - docker

stages:
  - test
  - deploy

install: skip

jobs:
  include:
    - stage: test
      name: "Testing Application"
      services: postgresql
      before_script:
        - psql -c 'CREATE DATABASE clines_test;' -U postgres
      script:
        - make test

    - stage: deploy
      name: "Deploy Application to Production"
      script:
        - make deploy
        
---------------------------------------------------

Alterações no Makefile

test:
	@ ./mvnw test	

package:
	@ ./mvnw clean package -DskipTests
	
docker-image-build: package
	@ docker build -t williammian/clines-api .

run: docker-image-build
	@ docker-compose up -d

stop: 
	@ docker-compose down -v
	
deploy: docker-image-build
	@ docker login --username=_ --password=$$DOCKER_REGISTRY_PASS registry.heroku.com
	@ docker image tag williammian/clines-api:latest registry.heroku.com/williammian-clines-teste/web:1
	@ docker image push registry.heroku.com/williammian-clines-teste/web:1
	@ make deploy_on_heroku IMAGE_ID=$$(docker image inspect registry.heroku.com/williammian-clines-teste/web:1 -f {{.Id}})

deploy_on_heroku:
	@ curl -X PATCH \
			-H "Authorization: Bearer $$DOCKER_REGISTRY_PASS" \
			-H "Content-Type: application/json" \
			-H "Accept:application/vnd.heroku+json; version=3.docker-releases" \
			-d '{ "updates": [{"type": "web",  "docker_image": "$(IMAGE_ID)"}] }' \
			https://api.heroku.com/apps/williammian-clines-teste/formation
			
----------------------------------------------------

Ao utilizar ferramentas de integração contínua, como Travis ou Jenkins, 
temos a possibilidade de automatizar todo o processo de build e entrega de software. 
Isso nos permite criar os conhecidos Build Pipeline e Deployment Pipeline, 
que nada mais são do que mapas estruturados de todas as atividades necessárias para realizar tais tarefas.

Também temos a possibilidade de sermos notificados sempre que algum problema ocorrer em qualquer ponto do pipeline, 
para que assim ele possa ser identificado e corrigido o quanto antes, evitando entrar em produção.

Perceba novamente como a automatização é algo extremamente importante e essencial quando buscamos reduzir 
o tempo de entrega de software e antecipar a descoberta de problemas.

------------------------------------------------------
